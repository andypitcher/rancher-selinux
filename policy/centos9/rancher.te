policy_module(rancher, 1.0.0)

gen_require(`
    type container_runtime_t, unconfined_service_t;
    type container_file_t;
')

########################
# type rke_kubereader_t #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type kubernetes_file_t;
        class dir { open read search };
        class file { getaddr open read };
        class lnk_file { getattr read };
')
container_domain_template(rke_kubereader, container)
virt_sandbox_domain(rke_kubereader_t)
corenet_unconfined(rke_kubereader_t)
allow rke_kubereader_t kubernetes_file_t:dir { open read search };
allow rke_kubereader_t kubernetes_file_t:file { getattr open read };
allow rke_kubereader_t kubernetes_file_t:lnk_file { getattr read };

########################
# type rke_logreader_t #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type container_log_t;
        type syslogd_var_run_t;
        type var_log_t;
        class dir { read search };
        class file { getattr map open read watch };
        class lnk_file { getattr read };
')
container_domain_template(rke_logreader, container)
virt_sandbox_domain(rke_logreader_t)
corenet_unconfined(rke_logreader_t)
allow rke_logreader_t container_log_t:dir { open read search };
allow rke_logreader_t container_log_t:lnk_file { getattr read };
allow rke_logreader_t container_log_t:file { getattr open read watch };
allow rke_logreader_t container_var_lib_t:dir search;
allow rke_logreader_t container_var_lib_t:file { getattr open read watch };
allow rke_logreader_t container_var_lib_t:lnk_file { getattr read };
allow rke_logreader_t syslogd_var_run_t:dir read;
allow rke_logreader_t syslogd_var_run_t:file { getattr map open read };
allow rke_logreader_t var_log_t:dir read;
allow rke_logreader_t var_log_t:file { getattr map open read watch };

########################
# type rke_container_t #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type container_log_t;
        type kubernetes_file_t;
        type container_var_run_t;
        class dir { read search };
        class file { open read };
')
type rke_opt_t;
files_type(rke_opt_t)
container_domain_template(rke_container, container)
virt_sandbox_domain(rke_container_t)
corenet_unconfined(rke_container_t)
manage_dirs_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_files_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_dirs_pattern(rke_container_t, container_log_t, container_log_t)
manage_files_pattern(rke_container_t, container_log_t, container_log_t)
manage_dirs_pattern(rke_container_t, kubernetes_file_t, kubernetes_file_t)
manage_files_pattern(rke_container_t, kubernetes_file_t, kubernetes_file_t)
manage_dirs_pattern(rke_container_t, rke_opt_t, rke_opt_t)
manage_files_pattern(rke_container_t, rke_opt_t, rke_opt_t)
manage_dirs_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_files_pattern(rke_container_t, container_var_lib_t, container_var_lib_t)
manage_dirs_pattern(rke_container_t, container_var_run_t, container_var_run_t)
manage_files_pattern(rke_container_t, container_var_run_t, container_var_run_t)
allow rke_container_t self:tcp_socket { accept listen };
allow rke_container_t container_var_lib_t:file map;
allow rke_container_t rke_opt_t:file map;
allow rke_container_t container_var_lib_t:dir { relabelfrom relabelto };
allow rke_container_t container_var_lib_t:file { relabelfrom relabelto };
allow rke_container_t rke_opt_t:dir { relabelfrom relabelto };
allow rke_container_t rke_opt_t:file { relabelfrom relabelto };

########################
# type rke_network_t   #
########################
gen_require(`
        type container_runtime_t, unconfined_service_t;
        type iptables_var_run_t;
        type var_run_t;
        type kernel_t;
')
container_domain_template(rke_network, container)
virt_sandbox_domain(rke_network_t)
corenet_unconfined(rke_network_t)
manage_dirs_pattern(rke_network_t, iptables_var_run_t, iptables_var_run_t)
manage_files_pattern(rke_network_t, iptables_var_run_t, iptables_var_run_t)
manage_dirs_pattern(rke_network_t, var_run_t, var_run_t)
manage_files_pattern(rke_network_t, var_run_t, var_run_t)
allow rke_network_t kernel_t:system module_request;
allow rke_network_t kernel_t:unix_dgram_socket sendto;
allow rke_network_t self:netlink_route_socket nlmsg_write;

############################################################################
# type prom_node_exporter_t   				 	           #
# target: prometheus-node-exporter container for Rancher monitoring chart  #
############################################################################
require {
	type container_runtime_t;
	type prom_node_exporter_t;
	class file { getattr open read };
	class dir { getattr open read search };
	class lnk_file { getattr read };
	class process { fork noatsecure rlimitinh siginh sigkill signal transition };
	class key { create search setattr view };
	class tcp_socket { accept bind create getattr listen read setopt write };
	class netlink_route_socket { bind create getattr getopt nlmsg_read read write };
	class fd use;
	class fifo_file write;
}
type prom_node_exporter_t;
container_domain_template(prom_node_exporter_t, container)
virt_sandbox_domain(prom_node_exporter_t)
allow container_runtime_t prom_node_exporter_t:dir { open read search };
allow container_runtime_t prom_node_exporter_t:file { getattr open read };
allow container_runtime_t prom_node_exporter_t:key { create search setattr view };
allow container_runtime_t prom_node_exporter_t:lnk_file { getattr read };
allow container_runtime_t prom_node_exporter_t:process { noatsecure rlimitinh siginh sigkill signal transition };
allow prom_node_exporter_t container_runtime_t:fd use;
allow prom_node_exporter_t container_runtime_t:fifo_file write;
allow prom_node_exporter_t self:dir { getattr search };
allow prom_node_exporter_t self:file { open read };
allow prom_node_exporter_t self:lnk_file read;
allow prom_node_exporter_t self:netlink_route_socket { bind create getattr getopt nlmsg_read read write };
allow prom_node_exporter_t self:process fork;
allow prom_node_exporter_t self:tcp_socket { accept bind create getattr listen read setopt write };
container_runtime_typebounds(prom_node_exporter_t)
corenet_tcp_bind_generic_node(prom_node_exporter_t)
corenet_tcp_bind_generic_port(prom_node_exporter_t)
dev_list_sysfs(prom_node_exporter_t)
dev_read_sysfs(prom_node_exporter_t)
files_read_etc_symlinks(prom_node_exporter_t)
init_read_state(prom_node_exporter_t)
kernel_read_network_state(prom_node_exporter_t)
kernel_read_network_state_symlinks(prom_node_exporter_t)
kernel_read_proc_files(prom_node_exporter_t)
kernel_read_proc_symlinks(prom_node_exporter_t)
kernel_read_software_raid_state(prom_node_exporter_t)
libs_read_lib_files(prom_node_exporter_t)
selinux_read_security_files(prom_node_exporter_t)
